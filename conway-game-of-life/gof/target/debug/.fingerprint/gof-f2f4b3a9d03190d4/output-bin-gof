{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/boki/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":1352,"byte_end":1365,"line_start":45,"line_end":45,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":106,"byte_end":113,"line_start":6,"line_end":6,"column_start":33,"column_end":40,"is_primary":false,"text":[{"text":"static mut screen: Vec<usize> = vec![0];","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/boki/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":1148,"byte_end":1375,"line_start":37,"line_end":47,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":1},{"text":"    () => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":1},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mstatic mut screen: Vec<usize> = vec![0];\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/boki/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":1336,"byte_end":1366,"line_start":45,"line_end":45,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":106,"byte_end":113,"line_start":6,"line_end":6,"column_start":33,"column_end":40,"is_primary":false,"text":[{"text":"static mut screen: Vec<usize> = vec![0];","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/boki/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":1148,"byte_end":1375,"line_start":37,"line_end":47,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mstatic mut screen: Vec<usize> = vec![0];\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0010, E0015.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0010, E0015.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0010`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0010`.\u001b[0m\n"}
